// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _image_filter_Block_Mat_exit2013_proc_HH_
#define _image_filter_Block_Mat_exit2013_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct image_filter_Block_Mat_exit2013_proc : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > rows;
    sc_in< sc_lv<32> > cols;
    sc_out< sc_lv<12> > img_0_rows_V_out_din;
    sc_in< sc_logic > img_0_rows_V_out_full_n;
    sc_out< sc_logic > img_0_rows_V_out_write;
    sc_out< sc_lv<12> > img_0_rows_V_out1_din;
    sc_in< sc_logic > img_0_rows_V_out1_full_n;
    sc_out< sc_logic > img_0_rows_V_out1_write;
    sc_out< sc_lv<12> > img_0_cols_V_out_din;
    sc_in< sc_logic > img_0_cols_V_out_full_n;
    sc_out< sc_logic > img_0_cols_V_out_write;
    sc_out< sc_lv<12> > img_0_cols_V_out2_din;
    sc_in< sc_logic > img_0_cols_V_out2_full_n;
    sc_out< sc_logic > img_0_cols_V_out2_write;
    sc_out< sc_lv<12> > ap_return_0;
    sc_out< sc_lv<12> > ap_return_1;
    sc_out< sc_lv<12> > ap_return_2;
    sc_out< sc_lv<12> > ap_return_3;
    sc_out< sc_lv<12> > ap_return_4;
    sc_out< sc_lv<12> > ap_return_5;
    sc_out< sc_lv<12> > ap_return_6;
    sc_out< sc_lv<12> > ap_return_7;
    sc_out< sc_lv<12> > ap_return_8;
    sc_out< sc_lv<12> > ap_return_9;


    // Module declarations
    image_filter_Block_Mat_exit2013_proc(sc_module_name name);
    SC_HAS_PROCESS(image_filter_Block_Mat_exit2013_proc);

    ~image_filter_Block_Mat_exit2013_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< bool > ap_sig_bdd_68;
    sc_signal< sc_lv<12> > img_0_rows_V_fu_74_p1;
    sc_signal< sc_lv<12> > img_0_cols_V_fu_80_p1;
    sc_signal< sc_lv<12> > ap_return_0_preg;
    sc_signal< sc_lv<12> > ap_return_1_preg;
    sc_signal< sc_lv<12> > ap_return_2_preg;
    sc_signal< sc_lv<12> > ap_return_3_preg;
    sc_signal< sc_lv<12> > ap_return_4_preg;
    sc_signal< sc_lv<12> > ap_return_5_preg;
    sc_signal< sc_lv<12> > ap_return_6_preg;
    sc_signal< sc_lv<12> > ap_return_7_preg;
    sc_signal< sc_lv<12> > ap_return_8_preg;
    sc_signal< sc_lv<12> > ap_return_9_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_st1_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_68();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_img_0_cols_V_fu_80_p1();
    void thread_img_0_cols_V_out2_din();
    void thread_img_0_cols_V_out2_write();
    void thread_img_0_cols_V_out_din();
    void thread_img_0_cols_V_out_write();
    void thread_img_0_rows_V_fu_74_p1();
    void thread_img_0_rows_V_out1_din();
    void thread_img_0_rows_V_out1_write();
    void thread_img_0_rows_V_out_din();
    void thread_img_0_rows_V_out_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
