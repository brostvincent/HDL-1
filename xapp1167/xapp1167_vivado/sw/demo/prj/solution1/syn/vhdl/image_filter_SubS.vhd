-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_SubS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_SubS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_1CE : STD_LOGIC_VECTOR (8 downto 0) := "111001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal p_7_i_reg_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_bdd_63 : BOOLEAN;
    signal exitcond7_i_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal i_V_fu_154_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_276 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond8_i_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_i_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_100 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_114 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal j_V_fu_169_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_fu_193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_24_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_26_fu_237_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_26_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_reg_123 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal p_i_cast_fu_145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_7_i_cast_fu_160_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_i_fu_175_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_20_fu_179_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_1_i_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_23_fu_201_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_2_i_fu_219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond7_i_fu_149_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond8_i_fu_164_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond7_i_fu_149_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond8_i_fu_164_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond7_i_fu_149_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond8_i_fu_164_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond7_i_fu_149_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- p_7_i_reg_134 assign process. --
    p_7_i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (exitcond8_i_fu_164_p2 = ap_const_lv1_0))) then 
                p_7_i_reg_134 <= j_V_fu_169_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond7_i_fu_149_p2 = ap_const_lv1_0))) then 
                p_7_i_reg_134 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_i_reg_123 assign process. --
    p_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_3)) then 
                p_i_reg_123 <= i_V_reg_276;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_63))) then 
                p_i_reg_123 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1 <= exitcond8_i_reg_281;
                exitcond8_i_reg_281 <= exitcond8_i_fu_164_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_V_reg_276 <= i_V_fu_154_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond8_i_reg_281 = ap_const_lv1_0) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                p_Val2_21_reg_295 <= p_Val2_21_fu_193_p1;
                p_Val2_24_reg_305 <= p_Val2_24_fu_215_p1;
                p_Val2_26_reg_315 <= p_Val2_26_fu_237_p1;
                tmp_82_reg_300 <= p_Val2_23_fu_201_p2(8 downto 8);
                tmp_84_reg_310 <= p_Val2_s_fu_223_p2(8 downto 8);
                tmp_reg_290 <= p_Val2_20_fu_179_p2(8 downto 8);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_63, exitcond7_i_fu_149_p2, exitcond8_i_fu_164_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_63)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond7_i_fu_149_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond8_i_fu_164_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((exitcond8_i_fu_164_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st6_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond7_i_fu_149_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond7_i_fu_149_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond7_i_fu_149_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond7_i_fu_149_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, exitcond8_i_reg_281)
    begin
                ap_sig_bdd_100 <= (((src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond8_i_reg_281 = ap_const_lv1_0)) or ((exitcond8_i_reg_281 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond8_i_reg_281 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_114 assign process. --
    ap_sig_bdd_114_assign_proc : process(dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1)
    begin
                ap_sig_bdd_114 <= (((dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1) and (dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_63 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_3 assign process. --
    ap_sig_cseq_ST_st6_fsm_3_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        ap_const_lv8_0 when (tmp_reg_290(0) = '1') else 
        p_Val2_21_reg_295;

    -- dst_data_stream_0_V_write assign process. --
    dst_data_stream_0_V_write_assign_proc : process(ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        ap_const_lv8_0 when (tmp_82_reg_300(0) = '1') else 
        p_Val2_24_reg_305;

    -- dst_data_stream_1_V_write assign process. --
    dst_data_stream_1_V_write_assign_proc : process(ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        ap_const_lv8_0 when (tmp_84_reg_310(0) = '1') else 
        p_Val2_26_reg_315;

    -- dst_data_stream_2_V_write assign process. --
    dst_data_stream_2_V_write_assign_proc : process(ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond8_i_reg_281_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond7_i_fu_149_p2 <= "1" when (p_i_cast_fu_145_p1 = src_rows_V_read) else "0";
    exitcond8_i_fu_164_p2 <= "1" when (p_7_i_cast_fu_160_p1 = src_cols_V_read) else "0";
    i_V_fu_154_p2 <= std_logic_vector(unsigned(p_i_reg_123) + unsigned(ap_const_lv11_1));
    j_V_fu_169_p2 <= std_logic_vector(unsigned(p_7_i_reg_134) + unsigned(ap_const_lv11_1));
    lhs_V_1_i_fu_197_p1 <= std_logic_vector(resize(unsigned(src_data_stream_1_V_dout),9));
    lhs_V_2_i_fu_219_p1 <= std_logic_vector(resize(unsigned(src_data_stream_2_V_dout),9));
    lhs_V_i_fu_175_p1 <= std_logic_vector(resize(unsigned(src_data_stream_0_V_dout),9));
    p_7_i_cast_fu_160_p1 <= std_logic_vector(resize(unsigned(p_7_i_reg_134),12));
    p_Val2_20_fu_179_p2 <= std_logic_vector(signed(ap_const_lv9_1CE) + signed(lhs_V_i_fu_175_p1));
    p_Val2_21_fu_193_p1 <= p_Val2_20_fu_179_p2(8 - 1 downto 0);
    p_Val2_23_fu_201_p2 <= std_logic_vector(signed(ap_const_lv9_1CE) + signed(lhs_V_1_i_fu_197_p1));
    p_Val2_24_fu_215_p1 <= p_Val2_23_fu_201_p2(8 - 1 downto 0);
    p_Val2_26_fu_237_p1 <= p_Val2_s_fu_223_p2(8 - 1 downto 0);
    p_Val2_s_fu_223_p2 <= std_logic_vector(signed(ap_const_lv9_1CE) + signed(lhs_V_2_i_fu_219_p1));
    p_i_cast_fu_145_p1 <= std_logic_vector(resize(unsigned(p_i_reg_123),12));

    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(exitcond8_i_reg_281, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond8_i_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_1_V_read assign process. --
    src_data_stream_1_V_read_assign_proc : process(exitcond8_i_reg_281, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond8_i_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_2_V_read assign process. --
    src_data_stream_2_V_read_assign_proc : process(exitcond8_i_reg_281, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_sig_bdd_114, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond8_i_reg_281 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_114 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
