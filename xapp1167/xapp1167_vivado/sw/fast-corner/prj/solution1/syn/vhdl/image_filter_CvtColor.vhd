-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_CvtColor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_0_V_read : OUT STD_LOGIC;
    p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_1_V_read : OUT STD_LOGIC;
    p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_2_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_CvtColor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st11_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv29_1322D0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100110010001011010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv30_259168 : STD_LOGIC_VECTOR (29 downto 0) := "000000001001011001000101101000";
    constant ap_const_lv28_74BC6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001110100101111000110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal j_reg_132 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_bdd_55 : BOOLEAN;
    signal exitcond2_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_67 : BOOLEAN;
    signal i_1_fu_152_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_282 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_78 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_92 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_110 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_287_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_167_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_296_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_296_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_296_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_301 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_301_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_301_pp0_it3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_301_pp0_it4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_13_reg_301_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_4_i_reg_316 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_261_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_1_reg_321 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_4_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_i_i_i_not_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_i_i_i_not_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_121 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal i_cast_fu_143_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast_fu_158_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_250_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_191_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_i_fu_207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_176_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_176_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_250_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_250_p20 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_261_p00 : STD_LOGIC_VECTOR (27 downto 0);

    component image_filter_mul_8ns_22ns_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component image_filter_mac_muladd_8ns_23ns_29ns_30_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component image_filter_mac_muladd_8ns_20ns_29ns_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    image_filter_mul_8ns_22ns_29_3_U38 : component image_filter_mul_8ns_22ns_29_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 22,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    image_filter_mac_muladd_8ns_23ns_29ns_30_1_U39 : component image_filter_mac_muladd_8ns_23ns_29ns_30_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 23,
        din2_WIDTH => 29,
        dout_WIDTH => 30)
    port map (
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        din2 => grp_fu_250_p2,
        dout => grp_fu_250_p3);

    image_filter_mac_muladd_8ns_20ns_29ns_29_1_U40 : component image_filter_mac_muladd_8ns_20ns_29ns_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 20,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        din2 => grp_fu_261_p2,
        dout => grp_fu_261_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_147_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((exitcond_fu_162_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_147_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_fu_162_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_147_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((exitcond_fu_162_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_147_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_121 assign process. --
    i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_3)) then 
                i_reg_121 <= i_1_reg_282;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_55))) then 
                i_reg_121 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- j_reg_132 assign process. --
    j_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (exitcond_fu_162_p2 = ap_const_lv1_0))) then 
                j_reg_132 <= j_1_fu_167_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_147_p2 = ap_const_lv1_0))) then 
                j_reg_132 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                ap_reg_ppstg_exitcond_reg_287_pp0_it1 <= exitcond_reg_287;
                exitcond_reg_287 <= exitcond_fu_162_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7))))) then
                ap_reg_ppstg_exitcond_reg_287_pp0_it2 <= ap_reg_ppstg_exitcond_reg_287_pp0_it1;
                ap_reg_ppstg_exitcond_reg_287_pp0_it3 <= ap_reg_ppstg_exitcond_reg_287_pp0_it2;
                ap_reg_ppstg_exitcond_reg_287_pp0_it4 <= ap_reg_ppstg_exitcond_reg_287_pp0_it3;
                ap_reg_ppstg_exitcond_reg_287_pp0_it5 <= ap_reg_ppstg_exitcond_reg_287_pp0_it4;
                ap_reg_ppstg_exitcond_reg_287_pp0_it6 <= ap_reg_ppstg_exitcond_reg_287_pp0_it5;
                ap_reg_ppstg_tmp_12_reg_296_pp0_it2 <= tmp_12_reg_296;
                ap_reg_ppstg_tmp_12_reg_296_pp0_it3 <= ap_reg_ppstg_tmp_12_reg_296_pp0_it2;
                ap_reg_ppstg_tmp_12_reg_296_pp0_it4 <= ap_reg_ppstg_tmp_12_reg_296_pp0_it3;
                ap_reg_ppstg_tmp_13_reg_301_pp0_it2 <= tmp_13_reg_301;
                ap_reg_ppstg_tmp_13_reg_301_pp0_it3 <= ap_reg_ppstg_tmp_13_reg_301_pp0_it2;
                ap_reg_ppstg_tmp_13_reg_301_pp0_it4 <= ap_reg_ppstg_tmp_13_reg_301_pp0_it3;
                ap_reg_ppstg_tmp_13_reg_301_pp0_it5 <= ap_reg_ppstg_tmp_13_reg_301_pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_282 <= i_1_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_287_pp0_it5))) then
                p_Result_2_i_i_i_not_reg_336 <= p_Result_2_i_i_i_not_fu_232_p2;
                p_Val2_4_reg_326 <= p_Val2_4_fu_218_p2;
                tmp_10_reg_331 <= p_Val2_4_fu_218_p2(7 downto 7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_287_pp0_it4))) then
                p_Val2_1_reg_321 <= grp_fu_261_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_287_pp0_it3))) then
                r_V_4_i_reg_316 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_287 = ap_const_lv1_0) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then
                tmp_12_reg_296 <= p_src_data_stream_0_V_dout;
                tmp_13_reg_301 <= p_src_data_stream_1_V_dout;
                tmp_14_reg_306 <= p_src_data_stream_2_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_55, exitcond2_fu_147_p2, exitcond_fu_162_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it6, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_55)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_147_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((exitcond_fu_162_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))) and not((exitcond_fu_162_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st11_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond2_fu_147_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_147_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond2_fu_147_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_147_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(p_dst_data_stream_V_full_n, ap_reg_ppstg_exitcond_reg_287_pp0_it6)
    begin
                ap_sig_bdd_110 <= ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_287_pp0_it6));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_55 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_67 assign process. --
    ap_sig_bdd_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_67 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_78 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, exitcond_reg_287)
    begin
                ap_sig_bdd_92 <= (((p_src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_reg_287 = ap_const_lv1_0)) or ((exitcond_reg_287 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_287 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_78)
    begin
        if (ap_sig_bdd_78) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_3 assign process. --
    ap_sig_cseq_ST_st11_fsm_3_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st11_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_67)
    begin
        if (ap_sig_bdd_67) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_147_p2 <= "1" when (i_cast_fu_143_p1 = p_src_rows_V_read) else "0";
    exitcond_fu_162_p2 <= "1" when (j_cast_fu_158_p1 = p_src_cols_V_read) else "0";

    -- grp_fu_176_ce assign process. --
    grp_fu_176_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p0 <= grp_fu_176_p00(8 - 1 downto 0);
    grp_fu_176_p00 <= std_logic_vector(resize(unsigned(tmp_14_reg_306),29));
    grp_fu_176_p1 <= ap_const_lv29_1322D0(22 - 1 downto 0);
    grp_fu_250_p0 <= grp_fu_250_p00(8 - 1 downto 0);
    grp_fu_250_p00 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_13_reg_301_pp0_it5),30));
    grp_fu_250_p1 <= ap_const_lv30_259168(23 - 1 downto 0);
    grp_fu_250_p2 <= grp_fu_250_p20(29 - 1 downto 0);
    grp_fu_250_p20 <= std_logic_vector(resize(unsigned(p_Val2_1_reg_321),30));
    grp_fu_261_p0 <= grp_fu_261_p00(8 - 1 downto 0);
    grp_fu_261_p00 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_12_reg_296_pp0_it4),28));
    grp_fu_261_p1 <= ap_const_lv28_74BC6(20 - 1 downto 0);
    grp_fu_261_p2 <= r_V_4_i_reg_316;
    i_1_fu_152_p2 <= std_logic_vector(unsigned(i_reg_121) + unsigned(ap_const_lv11_1));
    i_cast_fu_143_p1 <= std_logic_vector(resize(unsigned(i_reg_121),12));
    j_1_fu_167_p2 <= std_logic_vector(unsigned(j_reg_132) + unsigned(ap_const_lv11_1));
    j_cast_fu_158_p1 <= std_logic_vector(resize(unsigned(j_reg_132),12));
    not_carry_fu_238_p2 <= (tmp_10_reg_331 or p_Result_2_i_i_i_not_reg_336);
    p_Result_2_i_i_i_not_fu_232_p2 <= (tmp_9_fu_211_p3 xor ap_const_lv1_1);
    p_Val2_3_fu_191_p4 <= grp_fu_250_p3(29 downto 22);
    p_Val2_4_fu_218_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_191_p4) + unsigned(tmp_1_i_i_i_fu_207_p1));
    p_dst_data_stream_V_din <= 
        p_Val2_4_reg_326 when (not_carry_fu_238_p2(0) = '1') else 
        ap_const_lv8_FF;

    -- p_dst_data_stream_V_write assign process. --
    p_dst_data_stream_V_write_assign_proc : process(ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_287_pp0_it6, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_287_pp0_it6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_0_V_read assign process. --
    p_src_data_stream_0_V_read_assign_proc : process(exitcond_reg_287, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_287 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            p_src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_1_V_read assign process. --
    p_src_data_stream_1_V_read_assign_proc : process(exitcond_reg_287, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_287 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            p_src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_2_V_read assign process. --
    p_src_data_stream_2_V_read_assign_proc : process(exitcond_reg_287, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_92, ap_reg_ppiten_pp0_it1, ap_sig_bdd_110, ap_reg_ppiten_pp0_it7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_287 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_92 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_110 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7)))))) then 
            p_src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i_i_i_fu_207_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_200_p3),8));
    tmp_8_fu_200_p3 <= grp_fu_250_p3(21 downto 21);
    tmp_9_fu_211_p3 <= grp_fu_250_p3(29 downto 29);
end behav;
