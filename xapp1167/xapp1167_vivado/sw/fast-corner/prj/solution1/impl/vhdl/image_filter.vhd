-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.100000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=59,HLS_SYN_DSP=3,HLS_SYN_FF=7471,HLS_SYN_LUT=9235}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_start : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_done : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_continue : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_idle : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_ready : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_din : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_full_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit1217_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel : STD_LOGIC;
    signal p_dst_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_p_dst_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_p_dst_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel : STD_LOGIC;
    signal p_dst_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_p_dst_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_p_dst_cols_V_channel_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_rows_V_empty_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_cols_V_empty_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_start : STD_LOGIC := '0';
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_done : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_continue : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_idle : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_ready : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_empty_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_read : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_empty_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_read : STD_LOGIC;
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_4 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121719_proc1_U0_ap_return_5 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel : STD_LOGIC;
    signal mask_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_mask_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_mask_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel : STD_LOGIC;
    signal src0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src0_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel : STD_LOGIC;
    signal src0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src0_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel : STD_LOGIC;
    signal src1_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src1_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src1_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel : STD_LOGIC;
    signal src1_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_src1_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_src1_cols_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel : STD_LOGIC;
    signal mask_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_mask_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_mask_cols_V_channel_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_ap_start : STD_LOGIC := '0';
    signal image_filter_Duplicate_1080_1920_32_32_U0_ap_done : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_ap_continue : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_ap_idle : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_ap_ready : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_empty_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_read : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_empty_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_read : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_write : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_full_n : STD_LOGIC;
    signal image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_write : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_start : STD_LOGIC := '0';
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_done : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_continue : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_idle : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_ready : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_empty_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_read : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_empty_n : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_read : STD_LOGIC;
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Block_Mat_exit121721_proc1_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel : STD_LOGIC;
    signal gray_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_gray_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_gray_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel : STD_LOGIC;
    signal gray_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_gray_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_gray_cols_V_channel_full_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_start : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_done : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_continue : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_idle : STD_LOGIC;
    signal image_filter_CvtColor_U0_ap_ready : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_CvtColor_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_start : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_done : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_continue : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_idle : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_ap_ready : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_FAST_t_opr_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_FAST_t_opr_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_FAST_t_opr_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_FAST_t_opr_U0_p_mask_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_start : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_done : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_continue : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_idle : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_ap_ready : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_ap_start : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_ap_done : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_ap_continue : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_ap_idle : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_ap_ready : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_empty_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_read : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_full_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_full_n : STD_LOGIC;
    signal image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_empty_n : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_empty_n : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_empty_n : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal p_src_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_channel_full_n : STD_LOGIC;
    signal p_src_rows_V_channel_write : STD_LOGIC;
    signal p_src_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_channel_empty_n : STD_LOGIC;
    signal p_src_rows_V_channel_read : STD_LOGIC;
    signal p_src_rows_V_channel38_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_rows_V_channel38_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_channel38_full_n : STD_LOGIC;
    signal p_src_rows_V_channel38_write : STD_LOGIC;
    signal p_src_rows_V_channel38_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_channel38_empty_n : STD_LOGIC;
    signal p_src_rows_V_channel38_read : STD_LOGIC;
    signal p_src_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_channel_full_n : STD_LOGIC;
    signal p_src_cols_V_channel_write : STD_LOGIC;
    signal p_src_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_channel_empty_n : STD_LOGIC;
    signal p_src_cols_V_channel_read : STD_LOGIC;
    signal p_src_cols_V_channel39_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_cols_V_channel39_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_channel39_full_n : STD_LOGIC;
    signal p_src_cols_V_channel39_write : STD_LOGIC;
    signal p_src_cols_V_channel39_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_channel39_empty_n : STD_LOGIC;
    signal p_src_cols_V_channel39_read : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_2_loc_channel_full_n : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel_write : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_2_loc_channel_empty_n : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel_read : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel40_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel40_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_2_loc_channel40_full_n : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel40_write : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel40_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_rows_V_2_loc_channel40_empty_n : STD_LOGIC;
    signal p_src_rows_V_2_loc_channel40_read : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_2_loc_channel_full_n : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel_write : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_2_loc_channel_empty_n : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel_read : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel41_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel41_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_2_loc_channel41_full_n : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel41_write : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel41_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_src_cols_V_2_loc_channel41_empty_n : STD_LOGIC;
    signal p_src_cols_V_2_loc_channel41_read : STD_LOGIC;
    signal p_dst_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_dst_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_dst_rows_V_channel_write : STD_LOGIC;
    signal p_dst_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_dst_rows_V_channel_empty_n : STD_LOGIC;
    signal p_dst_rows_V_channel_read : STD_LOGIC;
    signal p_dst_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_dst_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal p_dst_cols_V_channel_write : STD_LOGIC;
    signal p_dst_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal p_dst_cols_V_channel_empty_n : STD_LOGIC;
    signal p_dst_cols_V_channel_read : STD_LOGIC;
    signal p_src_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_0_V_full_n : STD_LOGIC;
    signal p_src_data_stream_0_V_write : STD_LOGIC;
    signal p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal p_src_data_stream_0_V_read : STD_LOGIC;
    signal p_src_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_1_V_full_n : STD_LOGIC;
    signal p_src_data_stream_1_V_write : STD_LOGIC;
    signal p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal p_src_data_stream_1_V_read : STD_LOGIC;
    signal p_src_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_src_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_2_V_full_n : STD_LOGIC;
    signal p_src_data_stream_2_V_write : STD_LOGIC;
    signal p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal p_src_data_stream_2_V_read : STD_LOGIC;
    signal src0_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src0_rows_V_channel_write : STD_LOGIC;
    signal src0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src0_rows_V_channel_empty_n : STD_LOGIC;
    signal src0_rows_V_channel_read : STD_LOGIC;
    signal src0_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src0_cols_V_channel_write : STD_LOGIC;
    signal src0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src0_cols_V_channel_empty_n : STD_LOGIC;
    signal src0_cols_V_channel_read : STD_LOGIC;
    signal src1_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src1_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src1_rows_V_channel_write : STD_LOGIC;
    signal src1_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src1_rows_V_channel_empty_n : STD_LOGIC;
    signal src1_rows_V_channel_read : STD_LOGIC;
    signal src1_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src1_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src1_cols_V_channel_write : STD_LOGIC;
    signal src1_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src1_cols_V_channel_empty_n : STD_LOGIC;
    signal src1_cols_V_channel_read : STD_LOGIC;
    signal mask_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal mask_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal mask_rows_V_channel_write : STD_LOGIC;
    signal mask_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal mask_rows_V_channel_empty_n : STD_LOGIC;
    signal mask_rows_V_channel_read : STD_LOGIC;
    signal mask_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal mask_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal mask_cols_V_channel_write : STD_LOGIC;
    signal mask_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal mask_cols_V_channel_empty_n : STD_LOGIC;
    signal mask_cols_V_channel_read : STD_LOGIC;
    signal src0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal src0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_0_V_full_n : STD_LOGIC;
    signal src0_data_stream_0_V_write : STD_LOGIC;
    signal src0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_0_V_empty_n : STD_LOGIC;
    signal src0_data_stream_0_V_read : STD_LOGIC;
    signal src0_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal src0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_1_V_full_n : STD_LOGIC;
    signal src0_data_stream_1_V_write : STD_LOGIC;
    signal src0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_1_V_empty_n : STD_LOGIC;
    signal src0_data_stream_1_V_read : STD_LOGIC;
    signal src0_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal src0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_2_V_full_n : STD_LOGIC;
    signal src0_data_stream_2_V_write : STD_LOGIC;
    signal src0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src0_data_stream_2_V_empty_n : STD_LOGIC;
    signal src0_data_stream_2_V_read : STD_LOGIC;
    signal src1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal src1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_0_V_full_n : STD_LOGIC;
    signal src1_data_stream_0_V_write : STD_LOGIC;
    signal src1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_0_V_empty_n : STD_LOGIC;
    signal src1_data_stream_0_V_read : STD_LOGIC;
    signal src1_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal src1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_1_V_full_n : STD_LOGIC;
    signal src1_data_stream_1_V_write : STD_LOGIC;
    signal src1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_1_V_empty_n : STD_LOGIC;
    signal src1_data_stream_1_V_read : STD_LOGIC;
    signal src1_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal src1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_2_V_full_n : STD_LOGIC;
    signal src1_data_stream_2_V_write : STD_LOGIC;
    signal src1_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_2_V_empty_n : STD_LOGIC;
    signal src1_data_stream_2_V_read : STD_LOGIC;
    signal gray_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal gray_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal gray_rows_V_channel_write : STD_LOGIC;
    signal gray_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal gray_rows_V_channel_empty_n : STD_LOGIC;
    signal gray_rows_V_channel_read : STD_LOGIC;
    signal gray_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal gray_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal gray_cols_V_channel_write : STD_LOGIC;
    signal gray_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal gray_cols_V_channel_empty_n : STD_LOGIC;
    signal gray_cols_V_channel_read : STD_LOGIC;
    signal gray_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal gray_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_data_stream_0_V_full_n : STD_LOGIC;
    signal gray_data_stream_0_V_write : STD_LOGIC;
    signal gray_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_data_stream_0_V_empty_n : STD_LOGIC;
    signal gray_data_stream_0_V_read : STD_LOGIC;
    signal mask_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal mask_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_data_stream_0_V_full_n : STD_LOGIC;
    signal mask_data_stream_0_V_write : STD_LOGIC;
    signal mask_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mask_data_stream_0_V_empty_n : STD_LOGIC;
    signal mask_data_stream_0_V_read : STD_LOGIC;
    signal dmask_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal dmask_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dmask_data_stream_0_V_full_n : STD_LOGIC;
    signal dmask_data_stream_0_V_write : STD_LOGIC;
    signal dmask_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dmask_data_stream_0_V_empty_n : STD_LOGIC;
    signal dmask_data_stream_0_V_read : STD_LOGIC;
    signal p_dst_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal p_dst_data_stream_0_V_write : STD_LOGIC;
    signal p_dst_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_0_V_empty_n : STD_LOGIC;
    signal p_dst_data_stream_0_V_read : STD_LOGIC;
    signal p_dst_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_1_V_full_n : STD_LOGIC;
    signal p_dst_data_stream_1_V_write : STD_LOGIC;
    signal p_dst_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_1_V_empty_n : STD_LOGIC;
    signal p_dst_data_stream_1_V_read : STD_LOGIC;
    signal p_dst_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_2_V_full_n : STD_LOGIC;
    signal p_dst_data_stream_2_V_write : STD_LOGIC;
    signal p_dst_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_dst_data_stream_2_V_empty_n : STD_LOGIC;
    signal p_dst_data_stream_2_V_read : STD_LOGIC;
    signal ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_image_filter_AXIvideo2Mat_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_CvtColor_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_FAST_t_opr_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_image_filter_Mat2AXIvideo_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component image_filter_Block_Mat_exit1217_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_out_full_n : IN STD_LOGIC;
        p_src_rows_V_out_write : OUT STD_LOGIC;
        p_src_rows_V_out1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_out1_full_n : IN STD_LOGIC;
        p_src_rows_V_out1_write : OUT STD_LOGIC;
        p_src_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_out_full_n : IN STD_LOGIC;
        p_src_cols_V_out_write : OUT STD_LOGIC;
        p_src_cols_V_out2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_out2_full_n : IN STD_LOGIC;
        p_src_cols_V_out2_write : OUT STD_LOGIC;
        p_src_rows_V_2_out_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_2_out_out_full_n : IN STD_LOGIC;
        p_src_rows_V_2_out_out_write : OUT STD_LOGIC;
        p_src_rows_V_2_out_out3_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_2_out_out3_full_n : IN STD_LOGIC;
        p_src_rows_V_2_out_out3_write : OUT STD_LOGIC;
        p_src_cols_V_2_out_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_2_out_out_full_n : IN STD_LOGIC;
        p_src_cols_V_2_out_out_write : OUT STD_LOGIC;
        p_src_cols_V_2_out_out4_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_2_out_out4_full_n : IN STD_LOGIC;
        p_src_cols_V_2_out_out4_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component image_filter_AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Block_Mat_exit121719_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_2_reload_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_2_reload_empty_n : IN STD_LOGIC;
        p_src_rows_V_2_reload_read : OUT STD_LOGIC;
        p_src_cols_V_2_reload_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_2_reload_empty_n : IN STD_LOGIC;
        p_src_cols_V_2_reload_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component image_filter_Duplicate_1080_1920_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        src_rows_V_empty_n : IN STD_LOGIC;
        src_rows_V_read : OUT STD_LOGIC;
        src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_empty_n : IN STD_LOGIC;
        src_cols_V_read : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_0_V_full_n : IN STD_LOGIC;
        dst1_data_stream_0_V_write : OUT STD_LOGIC;
        dst1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_1_V_full_n : IN STD_LOGIC;
        dst1_data_stream_1_V_write : OUT STD_LOGIC;
        dst1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_2_V_full_n : IN STD_LOGIC;
        dst1_data_stream_2_V_write : OUT STD_LOGIC;
        dst2_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_0_V_full_n : IN STD_LOGIC;
        dst2_data_stream_0_V_write : OUT STD_LOGIC;
        dst2_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_1_V_full_n : IN STD_LOGIC;
        dst2_data_stream_1_V_write : OUT STD_LOGIC;
        dst2_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_2_V_full_n : IN STD_LOGIC;
        dst2_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Block_Mat_exit121721_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_2_reload_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_2_reload_empty_n : IN STD_LOGIC;
        p_src_rows_V_2_reload_read : OUT STD_LOGIC;
        p_src_cols_V_2_reload_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_2_reload_empty_n : IN STD_LOGIC;
        p_src_cols_V_2_reload_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component image_filter_CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_FAST_t_opr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_full_n : IN STD_LOGIC;
        p_mask_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Dilate_0_0_1080_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_PaintMask_32_0_1080_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_mask_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_mask_data_stream_V_empty_n : IN STD_LOGIC;
        p_mask_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component image_filter_Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_image_filter_p_src_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_rows_V_channel38 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_cols_V_channel39 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_rows_V_2_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_rows_V_2_loc_channel40 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_cols_V_2_loc_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_cols_V_2_loc_channel41 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_dst_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_dst_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_src_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src1_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src1_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_mask_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_mask_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_src1_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_gray_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_gray_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_gray_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_mask_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_dmask_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_dst_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_dst_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_image_filter_p_dst_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    image_filter_Block_Mat_exit1217_proc_U0 : component image_filter_Block_Mat_exit1217_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Block_Mat_exit1217_proc_U0_ap_start,
        ap_done => image_filter_Block_Mat_exit1217_proc_U0_ap_done,
        ap_continue => image_filter_Block_Mat_exit1217_proc_U0_ap_continue,
        ap_idle => image_filter_Block_Mat_exit1217_proc_U0_ap_idle,
        ap_ready => image_filter_Block_Mat_exit1217_proc_U0_ap_ready,
        rows => image_filter_Block_Mat_exit1217_proc_U0_rows,
        cols => image_filter_Block_Mat_exit1217_proc_U0_cols,
        p_src_rows_V_out_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_din,
        p_src_rows_V_out_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_full_n,
        p_src_rows_V_out_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_write,
        p_src_rows_V_out1_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_din,
        p_src_rows_V_out1_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_full_n,
        p_src_rows_V_out1_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_write,
        p_src_cols_V_out_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_din,
        p_src_cols_V_out_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_full_n,
        p_src_cols_V_out_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_write,
        p_src_cols_V_out2_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_din,
        p_src_cols_V_out2_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_full_n,
        p_src_cols_V_out2_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_write,
        p_src_rows_V_2_out_out_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_din,
        p_src_rows_V_2_out_out_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_full_n,
        p_src_rows_V_2_out_out_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_write,
        p_src_rows_V_2_out_out3_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_din,
        p_src_rows_V_2_out_out3_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_full_n,
        p_src_rows_V_2_out_out3_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_write,
        p_src_cols_V_2_out_out_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_din,
        p_src_cols_V_2_out_out_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_full_n,
        p_src_cols_V_2_out_out_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_write,
        p_src_cols_V_2_out_out4_din => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_din,
        p_src_cols_V_2_out_out4_full_n => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_full_n,
        p_src_cols_V_2_out_out4_write => image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_write,
        ap_return_0 => image_filter_Block_Mat_exit1217_proc_U0_ap_return_0,
        ap_return_1 => image_filter_Block_Mat_exit1217_proc_U0_ap_return_1);

    image_filter_AXIvideo2Mat_U0 : component image_filter_AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_AXIvideo2Mat_U0_ap_start,
        ap_done => image_filter_AXIvideo2Mat_U0_ap_done,
        ap_continue => image_filter_AXIvideo2Mat_U0_ap_continue,
        ap_idle => image_filter_AXIvideo2Mat_U0_ap_idle,
        ap_ready => image_filter_AXIvideo2Mat_U0_ap_ready,
        INPUT_STREAM_TDATA => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST,
        img_rows_V_dout => image_filter_AXIvideo2Mat_U0_img_rows_V_dout,
        img_rows_V_empty_n => image_filter_AXIvideo2Mat_U0_img_rows_V_empty_n,
        img_rows_V_read => image_filter_AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => image_filter_AXIvideo2Mat_U0_img_cols_V_dout,
        img_cols_V_empty_n => image_filter_AXIvideo2Mat_U0_img_cols_V_empty_n,
        img_cols_V_read => image_filter_AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write);

    image_filter_Block_Mat_exit121719_proc1_U0 : component image_filter_Block_Mat_exit121719_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Block_Mat_exit121719_proc1_U0_ap_start,
        ap_done => image_filter_Block_Mat_exit121719_proc1_U0_ap_done,
        ap_continue => image_filter_Block_Mat_exit121719_proc1_U0_ap_continue,
        ap_idle => image_filter_Block_Mat_exit121719_proc1_U0_ap_idle,
        ap_ready => image_filter_Block_Mat_exit121719_proc1_U0_ap_ready,
        p_src_rows_V_2_reload_dout => image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_dout,
        p_src_rows_V_2_reload_empty_n => image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_empty_n,
        p_src_rows_V_2_reload_read => image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_read,
        p_src_cols_V_2_reload_dout => image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_dout,
        p_src_cols_V_2_reload_empty_n => image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_empty_n,
        p_src_cols_V_2_reload_read => image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_read,
        ap_return_0 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_0,
        ap_return_1 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_1,
        ap_return_2 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_2,
        ap_return_3 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_3,
        ap_return_4 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_4,
        ap_return_5 => image_filter_Block_Mat_exit121719_proc1_U0_ap_return_5);

    image_filter_Duplicate_1080_1920_32_32_U0 : component image_filter_Duplicate_1080_1920_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Duplicate_1080_1920_32_32_U0_ap_start,
        ap_done => image_filter_Duplicate_1080_1920_32_32_U0_ap_done,
        ap_continue => image_filter_Duplicate_1080_1920_32_32_U0_ap_continue,
        ap_idle => image_filter_Duplicate_1080_1920_32_32_U0_ap_idle,
        ap_ready => image_filter_Duplicate_1080_1920_32_32_U0_ap_ready,
        src_rows_V_dout => image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_dout,
        src_rows_V_empty_n => image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_empty_n,
        src_rows_V_read => image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_read,
        src_cols_V_dout => image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_dout,
        src_cols_V_empty_n => image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_empty_n,
        src_cols_V_read => image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_read,
        src_data_stream_0_V_dout => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read => image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_read,
        dst1_data_stream_0_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_din,
        dst1_data_stream_0_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_full_n,
        dst1_data_stream_0_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_write,
        dst1_data_stream_1_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_din,
        dst1_data_stream_1_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_full_n,
        dst1_data_stream_1_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_write,
        dst1_data_stream_2_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_din,
        dst1_data_stream_2_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_full_n,
        dst1_data_stream_2_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_write,
        dst2_data_stream_0_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_din,
        dst2_data_stream_0_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_full_n,
        dst2_data_stream_0_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_write,
        dst2_data_stream_1_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_din,
        dst2_data_stream_1_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_full_n,
        dst2_data_stream_1_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_write,
        dst2_data_stream_2_V_din => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_din,
        dst2_data_stream_2_V_full_n => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_full_n,
        dst2_data_stream_2_V_write => image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_write);

    image_filter_Block_Mat_exit121721_proc1_U0 : component image_filter_Block_Mat_exit121721_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Block_Mat_exit121721_proc1_U0_ap_start,
        ap_done => image_filter_Block_Mat_exit121721_proc1_U0_ap_done,
        ap_continue => image_filter_Block_Mat_exit121721_proc1_U0_ap_continue,
        ap_idle => image_filter_Block_Mat_exit121721_proc1_U0_ap_idle,
        ap_ready => image_filter_Block_Mat_exit121721_proc1_U0_ap_ready,
        p_src_rows_V_2_reload_dout => image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_dout,
        p_src_rows_V_2_reload_empty_n => image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_empty_n,
        p_src_rows_V_2_reload_read => image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_read,
        p_src_cols_V_2_reload_dout => image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_dout,
        p_src_cols_V_2_reload_empty_n => image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_empty_n,
        p_src_cols_V_2_reload_read => image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_read,
        ap_return_0 => image_filter_Block_Mat_exit121721_proc1_U0_ap_return_0,
        ap_return_1 => image_filter_Block_Mat_exit121721_proc1_U0_ap_return_1);

    image_filter_CvtColor_U0 : component image_filter_CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_CvtColor_U0_ap_start,
        ap_done => image_filter_CvtColor_U0_ap_done,
        ap_continue => image_filter_CvtColor_U0_ap_continue,
        ap_idle => image_filter_CvtColor_U0_ap_idle,
        ap_ready => image_filter_CvtColor_U0_ap_ready,
        p_src_rows_V_read => image_filter_CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_read => image_filter_CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => image_filter_CvtColor_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => image_filter_CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => image_filter_CvtColor_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => image_filter_CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => image_filter_CvtColor_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => image_filter_CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => image_filter_CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => image_filter_CvtColor_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => image_filter_CvtColor_U0_p_dst_data_stream_V_write);

    image_filter_FAST_t_opr_U0 : component image_filter_FAST_t_opr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_FAST_t_opr_U0_ap_start,
        ap_done => image_filter_FAST_t_opr_U0_ap_done,
        ap_continue => image_filter_FAST_t_opr_U0_ap_continue,
        ap_idle => image_filter_FAST_t_opr_U0_ap_idle,
        ap_ready => image_filter_FAST_t_opr_U0_ap_ready,
        p_src_rows_V_read => image_filter_FAST_t_opr_U0_p_src_rows_V_read,
        p_src_cols_V_read => image_filter_FAST_t_opr_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => image_filter_FAST_t_opr_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => image_filter_FAST_t_opr_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => image_filter_FAST_t_opr_U0_p_src_data_stream_V_read,
        p_mask_data_stream_V_din => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din,
        p_mask_data_stream_V_full_n => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_full_n,
        p_mask_data_stream_V_write => image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write);

    image_filter_Dilate_0_0_1080_1920_U0 : component image_filter_Dilate_0_0_1080_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Dilate_0_0_1080_1920_U0_ap_start,
        ap_done => image_filter_Dilate_0_0_1080_1920_U0_ap_done,
        ap_continue => image_filter_Dilate_0_0_1080_1920_U0_ap_continue,
        ap_idle => image_filter_Dilate_0_0_1080_1920_U0_ap_idle,
        ap_ready => image_filter_Dilate_0_0_1080_1920_U0_ap_ready,
        p_src_rows_V_read => image_filter_Dilate_0_0_1080_1920_U0_p_src_rows_V_read,
        p_src_cols_V_read => image_filter_Dilate_0_0_1080_1920_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write);

    image_filter_PaintMask_32_0_1080_1920_U0 : component image_filter_PaintMask_32_0_1080_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_PaintMask_32_0_1080_1920_U0_ap_start,
        ap_done => image_filter_PaintMask_32_0_1080_1920_U0_ap_done,
        ap_continue => image_filter_PaintMask_32_0_1080_1920_U0_ap_continue,
        ap_idle => image_filter_PaintMask_32_0_1080_1920_U0_ap_idle,
        ap_ready => image_filter_PaintMask_32_0_1080_1920_U0_ap_ready,
        p_src_rows_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_src_rows_V_read,
        p_src_cols_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_read,
        p_mask_data_stream_V_dout => image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_dout,
        p_mask_data_stream_V_empty_n => image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_empty_n,
        p_mask_data_stream_V_read => image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_read,
        p_dst_data_stream_0_V_din => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write => image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_write);

    image_filter_Mat2AXIvideo_U0 : component image_filter_Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => image_filter_Mat2AXIvideo_U0_ap_start,
        ap_done => image_filter_Mat2AXIvideo_U0_ap_done,
        ap_continue => image_filter_Mat2AXIvideo_U0_ap_continue,
        ap_idle => image_filter_Mat2AXIvideo_U0_ap_idle,
        ap_ready => image_filter_Mat2AXIvideo_U0_ap_ready,
        img_rows_V_read => image_filter_Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_read => image_filter_Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_0_V_dout => image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST);

    p_src_rows_V_channel_U : component FIFO_image_filter_p_src_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => p_src_rows_V_channel_U_ap_dummy_ce,
        if_din => p_src_rows_V_channel_din,
        if_full_n => p_src_rows_V_channel_full_n,
        if_write => p_src_rows_V_channel_write,
        if_dout => p_src_rows_V_channel_dout,
        if_empty_n => p_src_rows_V_channel_empty_n,
        if_read => p_src_rows_V_channel_read);

    p_src_rows_V_channel38_U : component FIFO_image_filter_p_src_rows_V_channel38
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_rows_V_channel38_U_ap_dummy_ce,
        if_write_ce => p_src_rows_V_channel38_U_ap_dummy_ce,
        if_din => p_src_rows_V_channel38_din,
        if_full_n => p_src_rows_V_channel38_full_n,
        if_write => p_src_rows_V_channel38_write,
        if_dout => p_src_rows_V_channel38_dout,
        if_empty_n => p_src_rows_V_channel38_empty_n,
        if_read => p_src_rows_V_channel38_read);

    p_src_cols_V_channel_U : component FIFO_image_filter_p_src_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => p_src_cols_V_channel_U_ap_dummy_ce,
        if_din => p_src_cols_V_channel_din,
        if_full_n => p_src_cols_V_channel_full_n,
        if_write => p_src_cols_V_channel_write,
        if_dout => p_src_cols_V_channel_dout,
        if_empty_n => p_src_cols_V_channel_empty_n,
        if_read => p_src_cols_V_channel_read);

    p_src_cols_V_channel39_U : component FIFO_image_filter_p_src_cols_V_channel39
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_cols_V_channel39_U_ap_dummy_ce,
        if_write_ce => p_src_cols_V_channel39_U_ap_dummy_ce,
        if_din => p_src_cols_V_channel39_din,
        if_full_n => p_src_cols_V_channel39_full_n,
        if_write => p_src_cols_V_channel39_write,
        if_dout => p_src_cols_V_channel39_dout,
        if_empty_n => p_src_cols_V_channel39_empty_n,
        if_read => p_src_cols_V_channel39_read);

    p_src_rows_V_2_loc_channel_U : component FIFO_image_filter_p_src_rows_V_2_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_rows_V_2_loc_channel_U_ap_dummy_ce,
        if_write_ce => p_src_rows_V_2_loc_channel_U_ap_dummy_ce,
        if_din => p_src_rows_V_2_loc_channel_din,
        if_full_n => p_src_rows_V_2_loc_channel_full_n,
        if_write => p_src_rows_V_2_loc_channel_write,
        if_dout => p_src_rows_V_2_loc_channel_dout,
        if_empty_n => p_src_rows_V_2_loc_channel_empty_n,
        if_read => p_src_rows_V_2_loc_channel_read);

    p_src_rows_V_2_loc_channel40_U : component FIFO_image_filter_p_src_rows_V_2_loc_channel40
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_rows_V_2_loc_channel40_U_ap_dummy_ce,
        if_write_ce => p_src_rows_V_2_loc_channel40_U_ap_dummy_ce,
        if_din => p_src_rows_V_2_loc_channel40_din,
        if_full_n => p_src_rows_V_2_loc_channel40_full_n,
        if_write => p_src_rows_V_2_loc_channel40_write,
        if_dout => p_src_rows_V_2_loc_channel40_dout,
        if_empty_n => p_src_rows_V_2_loc_channel40_empty_n,
        if_read => p_src_rows_V_2_loc_channel40_read);

    p_src_cols_V_2_loc_channel_U : component FIFO_image_filter_p_src_cols_V_2_loc_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_cols_V_2_loc_channel_U_ap_dummy_ce,
        if_write_ce => p_src_cols_V_2_loc_channel_U_ap_dummy_ce,
        if_din => p_src_cols_V_2_loc_channel_din,
        if_full_n => p_src_cols_V_2_loc_channel_full_n,
        if_write => p_src_cols_V_2_loc_channel_write,
        if_dout => p_src_cols_V_2_loc_channel_dout,
        if_empty_n => p_src_cols_V_2_loc_channel_empty_n,
        if_read => p_src_cols_V_2_loc_channel_read);

    p_src_cols_V_2_loc_channel41_U : component FIFO_image_filter_p_src_cols_V_2_loc_channel41
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_cols_V_2_loc_channel41_U_ap_dummy_ce,
        if_write_ce => p_src_cols_V_2_loc_channel41_U_ap_dummy_ce,
        if_din => p_src_cols_V_2_loc_channel41_din,
        if_full_n => p_src_cols_V_2_loc_channel41_full_n,
        if_write => p_src_cols_V_2_loc_channel41_write,
        if_dout => p_src_cols_V_2_loc_channel41_dout,
        if_empty_n => p_src_cols_V_2_loc_channel41_empty_n,
        if_read => p_src_cols_V_2_loc_channel41_read);

    p_dst_rows_V_channel_U : component FIFO_image_filter_p_dst_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_dst_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => p_dst_rows_V_channel_U_ap_dummy_ce,
        if_din => p_dst_rows_V_channel_din,
        if_full_n => p_dst_rows_V_channel_full_n,
        if_write => p_dst_rows_V_channel_write,
        if_dout => p_dst_rows_V_channel_dout,
        if_empty_n => p_dst_rows_V_channel_empty_n,
        if_read => p_dst_rows_V_channel_read);

    p_dst_cols_V_channel_U : component FIFO_image_filter_p_dst_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_dst_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => p_dst_cols_V_channel_U_ap_dummy_ce,
        if_din => p_dst_cols_V_channel_din,
        if_full_n => p_dst_cols_V_channel_full_n,
        if_write => p_dst_cols_V_channel_write,
        if_dout => p_dst_cols_V_channel_dout,
        if_empty_n => p_dst_cols_V_channel_empty_n,
        if_read => p_dst_cols_V_channel_read);

    p_src_data_stream_0_V_U : component FIFO_image_filter_p_src_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => p_src_data_stream_0_V_U_ap_dummy_ce,
        if_din => p_src_data_stream_0_V_din,
        if_full_n => p_src_data_stream_0_V_full_n,
        if_write => p_src_data_stream_0_V_write,
        if_dout => p_src_data_stream_0_V_dout,
        if_empty_n => p_src_data_stream_0_V_empty_n,
        if_read => p_src_data_stream_0_V_read);

    p_src_data_stream_1_V_U : component FIFO_image_filter_p_src_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => p_src_data_stream_1_V_U_ap_dummy_ce,
        if_din => p_src_data_stream_1_V_din,
        if_full_n => p_src_data_stream_1_V_full_n,
        if_write => p_src_data_stream_1_V_write,
        if_dout => p_src_data_stream_1_V_dout,
        if_empty_n => p_src_data_stream_1_V_empty_n,
        if_read => p_src_data_stream_1_V_read);

    p_src_data_stream_2_V_U : component FIFO_image_filter_p_src_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_src_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => p_src_data_stream_2_V_U_ap_dummy_ce,
        if_din => p_src_data_stream_2_V_din,
        if_full_n => p_src_data_stream_2_V_full_n,
        if_write => p_src_data_stream_2_V_write,
        if_dout => p_src_data_stream_2_V_dout,
        if_empty_n => p_src_data_stream_2_V_empty_n,
        if_read => p_src_data_stream_2_V_read);

    src0_rows_V_channel_U : component FIFO_image_filter_src0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src0_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => src0_rows_V_channel_U_ap_dummy_ce,
        if_din => src0_rows_V_channel_din,
        if_full_n => src0_rows_V_channel_full_n,
        if_write => src0_rows_V_channel_write,
        if_dout => src0_rows_V_channel_dout,
        if_empty_n => src0_rows_V_channel_empty_n,
        if_read => src0_rows_V_channel_read);

    src0_cols_V_channel_U : component FIFO_image_filter_src0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src0_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => src0_cols_V_channel_U_ap_dummy_ce,
        if_din => src0_cols_V_channel_din,
        if_full_n => src0_cols_V_channel_full_n,
        if_write => src0_cols_V_channel_write,
        if_dout => src0_cols_V_channel_dout,
        if_empty_n => src0_cols_V_channel_empty_n,
        if_read => src0_cols_V_channel_read);

    src1_rows_V_channel_U : component FIFO_image_filter_src1_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src1_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => src1_rows_V_channel_U_ap_dummy_ce,
        if_din => src1_rows_V_channel_din,
        if_full_n => src1_rows_V_channel_full_n,
        if_write => src1_rows_V_channel_write,
        if_dout => src1_rows_V_channel_dout,
        if_empty_n => src1_rows_V_channel_empty_n,
        if_read => src1_rows_V_channel_read);

    src1_cols_V_channel_U : component FIFO_image_filter_src1_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src1_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => src1_cols_V_channel_U_ap_dummy_ce,
        if_din => src1_cols_V_channel_din,
        if_full_n => src1_cols_V_channel_full_n,
        if_write => src1_cols_V_channel_write,
        if_dout => src1_cols_V_channel_dout,
        if_empty_n => src1_cols_V_channel_empty_n,
        if_read => src1_cols_V_channel_read);

    mask_rows_V_channel_U : component FIFO_image_filter_mask_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => mask_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => mask_rows_V_channel_U_ap_dummy_ce,
        if_din => mask_rows_V_channel_din,
        if_full_n => mask_rows_V_channel_full_n,
        if_write => mask_rows_V_channel_write,
        if_dout => mask_rows_V_channel_dout,
        if_empty_n => mask_rows_V_channel_empty_n,
        if_read => mask_rows_V_channel_read);

    mask_cols_V_channel_U : component FIFO_image_filter_mask_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => mask_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => mask_cols_V_channel_U_ap_dummy_ce,
        if_din => mask_cols_V_channel_din,
        if_full_n => mask_cols_V_channel_full_n,
        if_write => mask_cols_V_channel_write,
        if_dout => mask_cols_V_channel_dout,
        if_empty_n => mask_cols_V_channel_empty_n,
        if_read => mask_cols_V_channel_read);

    src0_data_stream_0_V_U : component FIFO_image_filter_src0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => src0_data_stream_0_V_U_ap_dummy_ce,
        if_din => src0_data_stream_0_V_din,
        if_full_n => src0_data_stream_0_V_full_n,
        if_write => src0_data_stream_0_V_write,
        if_dout => src0_data_stream_0_V_dout,
        if_empty_n => src0_data_stream_0_V_empty_n,
        if_read => src0_data_stream_0_V_read);

    src0_data_stream_1_V_U : component FIFO_image_filter_src0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src0_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => src0_data_stream_1_V_U_ap_dummy_ce,
        if_din => src0_data_stream_1_V_din,
        if_full_n => src0_data_stream_1_V_full_n,
        if_write => src0_data_stream_1_V_write,
        if_dout => src0_data_stream_1_V_dout,
        if_empty_n => src0_data_stream_1_V_empty_n,
        if_read => src0_data_stream_1_V_read);

    src0_data_stream_2_V_U : component FIFO_image_filter_src0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src0_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => src0_data_stream_2_V_U_ap_dummy_ce,
        if_din => src0_data_stream_2_V_din,
        if_full_n => src0_data_stream_2_V_full_n,
        if_write => src0_data_stream_2_V_write,
        if_dout => src0_data_stream_2_V_dout,
        if_empty_n => src0_data_stream_2_V_empty_n,
        if_read => src0_data_stream_2_V_read);

    src1_data_stream_0_V_U : component FIFO_image_filter_src1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => src1_data_stream_0_V_U_ap_dummy_ce,
        if_din => src1_data_stream_0_V_din,
        if_full_n => src1_data_stream_0_V_full_n,
        if_write => src1_data_stream_0_V_write,
        if_dout => src1_data_stream_0_V_dout,
        if_empty_n => src1_data_stream_0_V_empty_n,
        if_read => src1_data_stream_0_V_read);

    src1_data_stream_1_V_U : component FIFO_image_filter_src1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src1_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => src1_data_stream_1_V_U_ap_dummy_ce,
        if_din => src1_data_stream_1_V_din,
        if_full_n => src1_data_stream_1_V_full_n,
        if_write => src1_data_stream_1_V_write,
        if_dout => src1_data_stream_1_V_dout,
        if_empty_n => src1_data_stream_1_V_empty_n,
        if_read => src1_data_stream_1_V_read);

    src1_data_stream_2_V_U : component FIFO_image_filter_src1_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src1_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => src1_data_stream_2_V_U_ap_dummy_ce,
        if_din => src1_data_stream_2_V_din,
        if_full_n => src1_data_stream_2_V_full_n,
        if_write => src1_data_stream_2_V_write,
        if_dout => src1_data_stream_2_V_dout,
        if_empty_n => src1_data_stream_2_V_empty_n,
        if_read => src1_data_stream_2_V_read);

    gray_rows_V_channel_U : component FIFO_image_filter_gray_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => gray_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => gray_rows_V_channel_U_ap_dummy_ce,
        if_din => gray_rows_V_channel_din,
        if_full_n => gray_rows_V_channel_full_n,
        if_write => gray_rows_V_channel_write,
        if_dout => gray_rows_V_channel_dout,
        if_empty_n => gray_rows_V_channel_empty_n,
        if_read => gray_rows_V_channel_read);

    gray_cols_V_channel_U : component FIFO_image_filter_gray_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => gray_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => gray_cols_V_channel_U_ap_dummy_ce,
        if_din => gray_cols_V_channel_din,
        if_full_n => gray_cols_V_channel_full_n,
        if_write => gray_cols_V_channel_write,
        if_dout => gray_cols_V_channel_dout,
        if_empty_n => gray_cols_V_channel_empty_n,
        if_read => gray_cols_V_channel_read);

    gray_data_stream_0_V_U : component FIFO_image_filter_gray_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => gray_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => gray_data_stream_0_V_U_ap_dummy_ce,
        if_din => gray_data_stream_0_V_din,
        if_full_n => gray_data_stream_0_V_full_n,
        if_write => gray_data_stream_0_V_write,
        if_dout => gray_data_stream_0_V_dout,
        if_empty_n => gray_data_stream_0_V_empty_n,
        if_read => gray_data_stream_0_V_read);

    mask_data_stream_0_V_U : component FIFO_image_filter_mask_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => mask_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => mask_data_stream_0_V_U_ap_dummy_ce,
        if_din => mask_data_stream_0_V_din,
        if_full_n => mask_data_stream_0_V_full_n,
        if_write => mask_data_stream_0_V_write,
        if_dout => mask_data_stream_0_V_dout,
        if_empty_n => mask_data_stream_0_V_empty_n,
        if_read => mask_data_stream_0_V_read);

    dmask_data_stream_0_V_U : component FIFO_image_filter_dmask_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => dmask_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => dmask_data_stream_0_V_U_ap_dummy_ce,
        if_din => dmask_data_stream_0_V_din,
        if_full_n => dmask_data_stream_0_V_full_n,
        if_write => dmask_data_stream_0_V_write,
        if_dout => dmask_data_stream_0_V_dout,
        if_empty_n => dmask_data_stream_0_V_empty_n,
        if_read => dmask_data_stream_0_V_read);

    p_dst_data_stream_0_V_U : component FIFO_image_filter_p_dst_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_dst_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => p_dst_data_stream_0_V_U_ap_dummy_ce,
        if_din => p_dst_data_stream_0_V_din,
        if_full_n => p_dst_data_stream_0_V_full_n,
        if_write => p_dst_data_stream_0_V_write,
        if_dout => p_dst_data_stream_0_V_dout,
        if_empty_n => p_dst_data_stream_0_V_empty_n,
        if_read => p_dst_data_stream_0_V_read);

    p_dst_data_stream_1_V_U : component FIFO_image_filter_p_dst_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_dst_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => p_dst_data_stream_1_V_U_ap_dummy_ce,
        if_din => p_dst_data_stream_1_V_din,
        if_full_n => p_dst_data_stream_1_V_full_n,
        if_write => p_dst_data_stream_1_V_write,
        if_dout => p_dst_data_stream_1_V_dout,
        if_empty_n => p_dst_data_stream_1_V_empty_n,
        if_read => p_dst_data_stream_1_V_read);

    p_dst_data_stream_2_V_U : component FIFO_image_filter_p_dst_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_dst_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => p_dst_data_stream_2_V_U_ap_dummy_ce,
        if_din => p_dst_data_stream_2_V_din,
        if_full_n => p_dst_data_stream_2_V_full_n,
        if_write => p_dst_data_stream_2_V_write,
        if_dout => p_dst_data_stream_2_V_dout,
        if_empty_n => p_dst_data_stream_2_V_empty_n,
        if_read => p_dst_data_stream_2_V_read);





    -- ap_reg_procdone_image_filter_AXIvideo2Mat_U0 assign process. --
    ap_reg_procdone_image_filter_AXIvideo2Mat_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_AXIvideo2Mat_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_AXIvideo2Mat_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0 assign process. --
    ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit121719_proc1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0 assign process. --
    ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit121721_proc1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0 assign process. --
    ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0 <= ap_const_logic_0;
                elsif ((image_filter_Block_Mat_exit1217_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_image_filter_Block_Mat_exit1217_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_CvtColor_U0 assign process. --
    ap_reg_procdone_image_filter_CvtColor_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_CvtColor_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_CvtColor_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0 assign process. --
    ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Dilate_0_0_1080_1920_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Dilate_0_0_1080_1920_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0 assign process. --
    ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Duplicate_1080_1920_32_32_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Duplicate_1080_1920_32_32_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_FAST_t_opr_U0 assign process. --
    ap_reg_procdone_image_filter_FAST_t_opr_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_FAST_t_opr_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_FAST_t_opr_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_FAST_t_opr_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_FAST_t_opr_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_Mat2AXIvideo_U0 assign process. --
    ap_reg_procdone_image_filter_Mat2AXIvideo_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_Mat2AXIvideo_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_Mat2AXIvideo_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_Mat2AXIvideo_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_Mat2AXIvideo_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0 assign process. --
    ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = image_filter_PaintMask_32_0_1080_1920_U0_ap_done)) then 
                    ap_reg_procdone_image_filter_PaintMask_32_0_1080_1920_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_gray_cols_V_channel_full_n assign process. --
    ap_reg_ready_gray_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_gray_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_continue))) then 
                    ap_reg_ready_gray_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_done) and (ap_const_logic_1 = gray_cols_V_channel_full_n))) then 
                    ap_reg_ready_gray_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_gray_rows_V_channel_full_n assign process. --
    ap_reg_ready_gray_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_gray_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_continue))) then 
                    ap_reg_ready_gray_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_done) and (ap_const_logic_1 = gray_rows_V_channel_full_n))) then 
                    ap_reg_ready_gray_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_mask_cols_V_channel_full_n assign process. --
    ap_reg_ready_mask_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_mask_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_mask_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = mask_cols_V_channel_full_n))) then 
                    ap_reg_ready_mask_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_mask_rows_V_channel_full_n assign process. --
    ap_reg_ready_mask_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_mask_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_mask_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = mask_rows_V_channel_full_n))) then 
                    ap_reg_ready_mask_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_p_dst_cols_V_channel_full_n assign process. --
    ap_reg_ready_p_dst_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((image_filter_Block_Mat_exit1217_proc_U0_ap_done = ap_const_logic_1) and (image_filter_Block_Mat_exit1217_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((image_filter_Block_Mat_exit1217_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = p_dst_cols_V_channel_full_n))) then 
                    ap_reg_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_p_dst_rows_V_channel_full_n assign process. --
    ap_reg_ready_p_dst_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((image_filter_Block_Mat_exit1217_proc_U0_ap_done = ap_const_logic_1) and (image_filter_Block_Mat_exit1217_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((image_filter_Block_Mat_exit1217_proc_U0_ap_done = ap_const_logic_1) and (p_dst_rows_V_channel_full_n = ap_const_logic_1))) then 
                    ap_reg_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src0_cols_V_channel_full_n assign process. --
    ap_reg_ready_src0_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = src0_cols_V_channel_full_n))) then 
                    ap_reg_ready_src0_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src0_rows_V_channel_full_n assign process. --
    ap_reg_ready_src0_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = src0_rows_V_channel_full_n))) then 
                    ap_reg_ready_src0_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src1_cols_V_channel_full_n assign process. --
    ap_reg_ready_src1_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = src1_cols_V_channel_full_n))) then 
                    ap_reg_ready_src1_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_src1_rows_V_channel_full_n assign process. --
    ap_reg_ready_src1_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_continue))) then 
                    ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_done) and (ap_const_logic_1 = src1_rows_V_channel_full_n))) then 
                    ap_reg_ready_src1_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- image_filter_Block_Mat_exit121719_proc1_U0_ap_start assign process. --
    image_filter_Block_Mat_exit121719_proc1_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                image_filter_Block_Mat_exit121719_proc1_U0_ap_start <= ap_const_logic_0;
            else
                image_filter_Block_Mat_exit121719_proc1_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- image_filter_Block_Mat_exit121721_proc1_U0_ap_start assign process. --
    image_filter_Block_Mat_exit121721_proc1_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                image_filter_Block_Mat_exit121721_proc1_U0_ap_start <= ap_const_logic_0;
            else
                image_filter_Block_Mat_exit121721_proc1_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- image_filter_Duplicate_1080_1920_32_32_U0_ap_start assign process. --
    image_filter_Duplicate_1080_1920_32_32_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                image_filter_Duplicate_1080_1920_32_32_U0_ap_start <= ap_const_logic_0;
            else
                image_filter_Duplicate_1080_1920_32_32_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    INPUT_STREAM_TREADY <= image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    OUTPUT_STREAM_TDATA <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID;

    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_mask_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_mask_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_mask_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_mask_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_src0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src0_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_src0_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src0_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_src1_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src1_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel_assign_proc : process(image_filter_Block_Mat_exit121719_proc1_U0_ap_done, ap_reg_ready_src1_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_src1_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel <= image_filter_Block_Mat_exit121719_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel_assign_proc : process(image_filter_Block_Mat_exit121721_proc1_U0_ap_done, ap_reg_ready_gray_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_gray_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel <= image_filter_Block_Mat_exit121721_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel_assign_proc : process(image_filter_Block_Mat_exit121721_proc1_U0_ap_done, ap_reg_ready_gray_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_gray_rows_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel <= image_filter_Block_Mat_exit121721_proc1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel_assign_proc : process(image_filter_Block_Mat_exit1217_proc_U0_ap_done, ap_reg_ready_p_dst_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_p_dst_cols_V_channel_full_n)) then 
            ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel <= image_filter_Block_Mat_exit1217_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel assign process. --
    ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel_assign_proc : process(image_filter_Block_Mat_exit1217_proc_U0_ap_done, ap_reg_ready_p_dst_rows_V_channel_full_n)
    begin
        if ((ap_reg_ready_p_dst_rows_V_channel_full_n = ap_const_logic_1)) then 
            ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel <= image_filter_Block_Mat_exit1217_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(image_filter_Block_Mat_exit1217_proc_U0_ap_idle, image_filter_AXIvideo2Mat_U0_ap_idle, image_filter_Block_Mat_exit121719_proc1_U0_ap_idle, image_filter_Duplicate_1080_1920_32_32_U0_ap_idle, image_filter_Block_Mat_exit121721_proc1_U0_ap_idle, image_filter_CvtColor_U0_ap_idle, image_filter_FAST_t_opr_U0_ap_idle, image_filter_Dilate_0_0_1080_1920_U0_ap_idle, image_filter_PaintMask_32_0_1080_1920_U0_ap_idle, image_filter_Mat2AXIvideo_U0_ap_idle, p_dst_rows_V_channel_empty_n, p_dst_cols_V_channel_empty_n, src0_rows_V_channel_empty_n, src0_cols_V_channel_empty_n, src1_rows_V_channel_empty_n, src1_cols_V_channel_empty_n, mask_rows_V_channel_empty_n, mask_cols_V_channel_empty_n, gray_rows_V_channel_empty_n, gray_cols_V_channel_empty_n)
    begin
        if (((image_filter_Block_Mat_exit1217_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = image_filter_AXIvideo2Mat_U0_ap_idle) and (ap_const_logic_1 = image_filter_Block_Mat_exit121719_proc1_U0_ap_idle) and (ap_const_logic_1 = image_filter_Duplicate_1080_1920_32_32_U0_ap_idle) and (ap_const_logic_1 = image_filter_Block_Mat_exit121721_proc1_U0_ap_idle) and (ap_const_logic_1 = image_filter_CvtColor_U0_ap_idle) and (ap_const_logic_1 = image_filter_FAST_t_opr_U0_ap_idle) and (ap_const_logic_1 = image_filter_Dilate_0_0_1080_1920_U0_ap_idle) and (ap_const_logic_1 = image_filter_PaintMask_32_0_1080_1920_U0_ap_idle) and (ap_const_logic_1 = image_filter_Mat2AXIvideo_U0_ap_idle) and (ap_const_logic_0 = p_dst_rows_V_channel_empty_n) and (ap_const_logic_0 = p_dst_cols_V_channel_empty_n) and (ap_const_logic_0 = src0_rows_V_channel_empty_n) and (ap_const_logic_0 = src0_cols_V_channel_empty_n) and (ap_const_logic_0 = src1_rows_V_channel_empty_n) and (ap_const_logic_0 = src1_cols_V_channel_empty_n) and (ap_const_logic_0 = mask_rows_V_channel_empty_n) and (ap_const_logic_0 = mask_cols_V_channel_empty_n) and (ap_const_logic_0 = gray_rows_V_channel_empty_n) and (ap_const_logic_0 = gray_cols_V_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(image_filter_Mat2AXIvideo_U0_ap_done)
    begin
        if ((ap_const_logic_1 = image_filter_Mat2AXIvideo_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_gray_cols_V_channel_full_n assign process. --
    ap_sig_ready_gray_cols_V_channel_full_n_assign_proc : process(gray_cols_V_channel_full_n, ap_reg_ready_gray_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_gray_cols_V_channel_full_n)) then 
            ap_sig_ready_gray_cols_V_channel_full_n <= gray_cols_V_channel_full_n;
        else 
            ap_sig_ready_gray_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_gray_rows_V_channel_full_n assign process. --
    ap_sig_ready_gray_rows_V_channel_full_n_assign_proc : process(gray_rows_V_channel_full_n, ap_reg_ready_gray_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_gray_rows_V_channel_full_n)) then 
            ap_sig_ready_gray_rows_V_channel_full_n <= gray_rows_V_channel_full_n;
        else 
            ap_sig_ready_gray_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_mask_cols_V_channel_full_n assign process. --
    ap_sig_ready_mask_cols_V_channel_full_n_assign_proc : process(mask_cols_V_channel_full_n, ap_reg_ready_mask_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_mask_cols_V_channel_full_n)) then 
            ap_sig_ready_mask_cols_V_channel_full_n <= mask_cols_V_channel_full_n;
        else 
            ap_sig_ready_mask_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_mask_rows_V_channel_full_n assign process. --
    ap_sig_ready_mask_rows_V_channel_full_n_assign_proc : process(mask_rows_V_channel_full_n, ap_reg_ready_mask_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_mask_rows_V_channel_full_n)) then 
            ap_sig_ready_mask_rows_V_channel_full_n <= mask_rows_V_channel_full_n;
        else 
            ap_sig_ready_mask_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_p_dst_cols_V_channel_full_n assign process. --
    ap_sig_ready_p_dst_cols_V_channel_full_n_assign_proc : process(p_dst_cols_V_channel_full_n, ap_reg_ready_p_dst_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_p_dst_cols_V_channel_full_n)) then 
            ap_sig_ready_p_dst_cols_V_channel_full_n <= p_dst_cols_V_channel_full_n;
        else 
            ap_sig_ready_p_dst_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_p_dst_rows_V_channel_full_n assign process. --
    ap_sig_ready_p_dst_rows_V_channel_full_n_assign_proc : process(p_dst_rows_V_channel_full_n, ap_reg_ready_p_dst_rows_V_channel_full_n)
    begin
        if ((ap_reg_ready_p_dst_rows_V_channel_full_n = ap_const_logic_0)) then 
            ap_sig_ready_p_dst_rows_V_channel_full_n <= p_dst_rows_V_channel_full_n;
        else 
            ap_sig_ready_p_dst_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src0_cols_V_channel_full_n assign process. --
    ap_sig_ready_src0_cols_V_channel_full_n_assign_proc : process(src0_cols_V_channel_full_n, ap_reg_ready_src0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src0_cols_V_channel_full_n)) then 
            ap_sig_ready_src0_cols_V_channel_full_n <= src0_cols_V_channel_full_n;
        else 
            ap_sig_ready_src0_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src0_rows_V_channel_full_n assign process. --
    ap_sig_ready_src0_rows_V_channel_full_n_assign_proc : process(src0_rows_V_channel_full_n, ap_reg_ready_src0_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src0_rows_V_channel_full_n)) then 
            ap_sig_ready_src0_rows_V_channel_full_n <= src0_rows_V_channel_full_n;
        else 
            ap_sig_ready_src0_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src1_cols_V_channel_full_n assign process. --
    ap_sig_ready_src1_cols_V_channel_full_n_assign_proc : process(src1_cols_V_channel_full_n, ap_reg_ready_src1_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src1_cols_V_channel_full_n)) then 
            ap_sig_ready_src1_cols_V_channel_full_n <= src1_cols_V_channel_full_n;
        else 
            ap_sig_ready_src1_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_src1_rows_V_channel_full_n assign process. --
    ap_sig_ready_src1_rows_V_channel_full_n_assign_proc : process(src1_rows_V_channel_full_n, ap_reg_ready_src1_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_src1_rows_V_channel_full_n)) then 
            ap_sig_ready_src1_rows_V_channel_full_n <= src1_rows_V_channel_full_n;
        else 
            ap_sig_ready_src1_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_sig_top_allready <= image_filter_AXIvideo2Mat_U0_ap_ready;
    dmask_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    dmask_data_stream_0_V_din <= image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_din;
    dmask_data_stream_0_V_read <= image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_read;
    dmask_data_stream_0_V_write <= image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_write;
    gray_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    gray_cols_V_channel_din <= image_filter_Block_Mat_exit121721_proc1_U0_ap_return_1;
    gray_cols_V_channel_read <= image_filter_FAST_t_opr_U0_ap_ready;
    gray_cols_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_cols_V_channel;
    gray_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    gray_data_stream_0_V_din <= image_filter_CvtColor_U0_p_dst_data_stream_V_din;
    gray_data_stream_0_V_read <= image_filter_FAST_t_opr_U0_p_src_data_stream_V_read;
    gray_data_stream_0_V_write <= image_filter_CvtColor_U0_p_dst_data_stream_V_write;
    gray_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    gray_rows_V_channel_din <= image_filter_Block_Mat_exit121721_proc1_U0_ap_return_0;
    gray_rows_V_channel_read <= image_filter_FAST_t_opr_U0_ap_ready;
    gray_rows_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121721_proc1_U0_gray_rows_V_channel;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDATA <= INPUT_STREAM_TDATA;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TDEST <= INPUT_STREAM_TDEST;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TID <= INPUT_STREAM_TID;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TKEEP <= INPUT_STREAM_TKEEP;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TLAST <= INPUT_STREAM_TLAST;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TSTRB <= INPUT_STREAM_TSTRB;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TUSER <= INPUT_STREAM_TUSER;
    image_filter_AXIvideo2Mat_U0_INPUT_STREAM_TVALID <= INPUT_STREAM_TVALID;
    image_filter_AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    image_filter_AXIvideo2Mat_U0_ap_start <= ap_start;
    image_filter_AXIvideo2Mat_U0_img_cols_V_dout <= p_src_cols_V_channel39_dout;
    image_filter_AXIvideo2Mat_U0_img_cols_V_empty_n <= p_src_cols_V_channel39_empty_n;
    image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_full_n <= p_src_data_stream_0_V_full_n;
    image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_full_n <= p_src_data_stream_1_V_full_n;
    image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_full_n <= p_src_data_stream_2_V_full_n;
    image_filter_AXIvideo2Mat_U0_img_rows_V_dout <= p_src_rows_V_channel38_dout;
    image_filter_AXIvideo2Mat_U0_img_rows_V_empty_n <= p_src_rows_V_channel38_empty_n;

    -- image_filter_Block_Mat_exit121719_proc1_U0_ap_continue assign process. --
    image_filter_Block_Mat_exit121719_proc1_U0_ap_continue_assign_proc : process(ap_sig_ready_mask_rows_V_channel_full_n, ap_sig_ready_src0_rows_V_channel_full_n, ap_sig_ready_src0_cols_V_channel_full_n, ap_sig_ready_src1_rows_V_channel_full_n, ap_sig_ready_src1_cols_V_channel_full_n, ap_sig_ready_mask_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_mask_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_src0_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_src0_cols_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_src1_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_src1_cols_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_mask_cols_V_channel_full_n))) then 
            image_filter_Block_Mat_exit121719_proc1_U0_ap_continue <= ap_const_logic_1;
        else 
            image_filter_Block_Mat_exit121719_proc1_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_dout <= p_src_cols_V_2_loc_channel41_dout;
    image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_empty_n <= p_src_cols_V_2_loc_channel41_empty_n;
    image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_dout <= p_src_rows_V_2_loc_channel40_dout;
    image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_empty_n <= p_src_rows_V_2_loc_channel40_empty_n;

    -- image_filter_Block_Mat_exit121721_proc1_U0_ap_continue assign process. --
    image_filter_Block_Mat_exit121721_proc1_U0_ap_continue_assign_proc : process(ap_sig_ready_gray_rows_V_channel_full_n, ap_sig_ready_gray_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_gray_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_gray_cols_V_channel_full_n))) then 
            image_filter_Block_Mat_exit121721_proc1_U0_ap_continue <= ap_const_logic_1;
        else 
            image_filter_Block_Mat_exit121721_proc1_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_dout <= p_src_cols_V_2_loc_channel_dout;
    image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_empty_n <= p_src_cols_V_2_loc_channel_empty_n;
    image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_dout <= p_src_rows_V_2_loc_channel_dout;
    image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_empty_n <= p_src_rows_V_2_loc_channel_empty_n;

    -- image_filter_Block_Mat_exit1217_proc_U0_ap_continue assign process. --
    image_filter_Block_Mat_exit1217_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_p_dst_rows_V_channel_full_n, ap_sig_ready_p_dst_cols_V_channel_full_n)
    begin
        if (((ap_sig_ready_p_dst_rows_V_channel_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_ready_p_dst_cols_V_channel_full_n))) then 
            image_filter_Block_Mat_exit1217_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            image_filter_Block_Mat_exit1217_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    image_filter_Block_Mat_exit1217_proc_U0_ap_start <= ap_start;
    image_filter_Block_Mat_exit1217_proc_U0_cols <= cols;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_full_n <= p_src_cols_V_2_loc_channel41_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_full_n <= p_src_cols_V_2_loc_channel_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_full_n <= p_src_cols_V_channel39_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_full_n <= p_src_cols_V_channel_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_full_n <= p_src_rows_V_2_loc_channel40_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_full_n <= p_src_rows_V_2_loc_channel_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_full_n <= p_src_rows_V_channel38_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_full_n <= p_src_rows_V_channel_full_n;
    image_filter_Block_Mat_exit1217_proc_U0_rows <= rows;
    image_filter_CvtColor_U0_ap_continue <= ap_const_logic_1;
    image_filter_CvtColor_U0_ap_start <= (src0_rows_V_channel_empty_n and src0_cols_V_channel_empty_n);
    image_filter_CvtColor_U0_p_dst_data_stream_V_full_n <= gray_data_stream_0_V_full_n;
    image_filter_CvtColor_U0_p_src_cols_V_read <= src0_cols_V_channel_dout;
    image_filter_CvtColor_U0_p_src_data_stream_0_V_dout <= src0_data_stream_0_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_0_V_empty_n <= src0_data_stream_0_V_empty_n;
    image_filter_CvtColor_U0_p_src_data_stream_1_V_dout <= src0_data_stream_1_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_1_V_empty_n <= src0_data_stream_1_V_empty_n;
    image_filter_CvtColor_U0_p_src_data_stream_2_V_dout <= src0_data_stream_2_V_dout;
    image_filter_CvtColor_U0_p_src_data_stream_2_V_empty_n <= src0_data_stream_2_V_empty_n;
    image_filter_CvtColor_U0_p_src_rows_V_read <= src0_rows_V_channel_dout;
    image_filter_Dilate_0_0_1080_1920_U0_ap_continue <= ap_const_logic_1;
    image_filter_Dilate_0_0_1080_1920_U0_ap_start <= (mask_rows_V_channel_empty_n and mask_cols_V_channel_empty_n);
    image_filter_Dilate_0_0_1080_1920_U0_p_dst_data_stream_V_full_n <= dmask_data_stream_0_V_full_n;
    image_filter_Dilate_0_0_1080_1920_U0_p_src_cols_V_read <= mask_cols_V_channel_dout;
    image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_dout <= mask_data_stream_0_V_dout;
    image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_empty_n <= mask_data_stream_0_V_empty_n;
    image_filter_Dilate_0_0_1080_1920_U0_p_src_rows_V_read <= mask_rows_V_channel_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_ap_continue <= ap_const_logic_1;
    image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_full_n <= src0_data_stream_0_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_full_n <= src0_data_stream_1_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_full_n <= src0_data_stream_2_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_full_n <= src1_data_stream_0_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_full_n <= src1_data_stream_1_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_full_n <= src1_data_stream_2_V_full_n;
    image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_dout <= p_src_cols_V_channel_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_empty_n <= p_src_cols_V_channel_empty_n;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_dout <= p_src_data_stream_0_V_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_empty_n <= p_src_data_stream_0_V_empty_n;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_dout <= p_src_data_stream_1_V_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_empty_n <= p_src_data_stream_1_V_empty_n;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_dout <= p_src_data_stream_2_V_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_empty_n <= p_src_data_stream_2_V_empty_n;
    image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_dout <= p_src_rows_V_channel_dout;
    image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_empty_n <= p_src_rows_V_channel_empty_n;
    image_filter_FAST_t_opr_U0_ap_continue <= ap_const_logic_1;
    image_filter_FAST_t_opr_U0_ap_start <= (gray_rows_V_channel_empty_n and gray_cols_V_channel_empty_n);
    image_filter_FAST_t_opr_U0_p_mask_data_stream_V_full_n <= mask_data_stream_0_V_full_n;
    image_filter_FAST_t_opr_U0_p_src_cols_V_read <= gray_cols_V_channel_dout;
    image_filter_FAST_t_opr_U0_p_src_data_stream_V_dout <= gray_data_stream_0_V_dout;
    image_filter_FAST_t_opr_U0_p_src_data_stream_V_empty_n <= gray_data_stream_0_V_empty_n;
    image_filter_FAST_t_opr_U0_p_src_rows_V_read <= gray_rows_V_channel_dout;
    image_filter_Mat2AXIvideo_U0_OUTPUT_STREAM_TREADY <= OUTPUT_STREAM_TREADY;
    image_filter_Mat2AXIvideo_U0_ap_continue <= ap_sig_hs_continue;
    image_filter_Mat2AXIvideo_U0_ap_start <= (p_dst_rows_V_channel_empty_n and p_dst_cols_V_channel_empty_n);
    image_filter_Mat2AXIvideo_U0_img_cols_V_read <= p_dst_cols_V_channel_dout;
    image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_dout <= p_dst_data_stream_0_V_dout;
    image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_empty_n <= p_dst_data_stream_0_V_empty_n;
    image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_dout <= p_dst_data_stream_1_V_dout;
    image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_empty_n <= p_dst_data_stream_1_V_empty_n;
    image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_dout <= p_dst_data_stream_2_V_dout;
    image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_empty_n <= p_dst_data_stream_2_V_empty_n;
    image_filter_Mat2AXIvideo_U0_img_rows_V_read <= p_dst_rows_V_channel_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_ap_continue <= ap_const_logic_1;
    image_filter_PaintMask_32_0_1080_1920_U0_ap_start <= (src1_rows_V_channel_empty_n and src1_cols_V_channel_empty_n);
    image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_full_n <= p_dst_data_stream_0_V_full_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_full_n <= p_dst_data_stream_1_V_full_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_full_n <= p_dst_data_stream_2_V_full_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_dout <= dmask_data_stream_0_V_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_p_mask_data_stream_V_empty_n <= dmask_data_stream_0_V_empty_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_cols_V_read <= src1_cols_V_channel_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_dout <= src1_data_stream_0_V_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_empty_n <= src1_data_stream_0_V_empty_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_dout <= src1_data_stream_1_V_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_empty_n <= src1_data_stream_1_V_empty_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_dout <= src1_data_stream_2_V_dout;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_empty_n <= src1_data_stream_2_V_empty_n;
    image_filter_PaintMask_32_0_1080_1920_U0_p_src_rows_V_read <= src1_rows_V_channel_dout;
    mask_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    mask_cols_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_5;
    mask_cols_V_channel_read <= image_filter_Dilate_0_0_1080_1920_U0_ap_ready;
    mask_cols_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_cols_V_channel;
    mask_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    mask_data_stream_0_V_din <= image_filter_FAST_t_opr_U0_p_mask_data_stream_V_din;
    mask_data_stream_0_V_read <= image_filter_Dilate_0_0_1080_1920_U0_p_src_data_stream_V_read;
    mask_data_stream_0_V_write <= image_filter_FAST_t_opr_U0_p_mask_data_stream_V_write;
    mask_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    mask_rows_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_4;
    mask_rows_V_channel_read <= image_filter_Dilate_0_0_1080_1920_U0_ap_ready;
    mask_rows_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_mask_rows_V_channel;
    p_dst_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_dst_cols_V_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_ap_return_1;
    p_dst_cols_V_channel_read <= image_filter_Mat2AXIvideo_U0_ap_ready;
    p_dst_cols_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_cols_V_channel;
    p_dst_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_dst_data_stream_0_V_din <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_din;
    p_dst_data_stream_0_V_read <= image_filter_Mat2AXIvideo_U0_img_data_stream_0_V_read;
    p_dst_data_stream_0_V_write <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_0_V_write;
    p_dst_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_dst_data_stream_1_V_din <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_din;
    p_dst_data_stream_1_V_read <= image_filter_Mat2AXIvideo_U0_img_data_stream_1_V_read;
    p_dst_data_stream_1_V_write <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_1_V_write;
    p_dst_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_dst_data_stream_2_V_din <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_din;
    p_dst_data_stream_2_V_read <= image_filter_Mat2AXIvideo_U0_img_data_stream_2_V_read;
    p_dst_data_stream_2_V_write <= image_filter_PaintMask_32_0_1080_1920_U0_p_dst_data_stream_2_V_write;
    p_dst_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_dst_rows_V_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_ap_return_0;
    p_dst_rows_V_channel_read <= image_filter_Mat2AXIvideo_U0_ap_ready;
    p_dst_rows_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit1217_proc_U0_p_dst_rows_V_channel;
    p_src_cols_V_2_loc_channel41_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_cols_V_2_loc_channel41_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_din;
    p_src_cols_V_2_loc_channel41_read <= image_filter_Block_Mat_exit121719_proc1_U0_p_src_cols_V_2_reload_read;
    p_src_cols_V_2_loc_channel41_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out4_write;
    p_src_cols_V_2_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_cols_V_2_loc_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_din;
    p_src_cols_V_2_loc_channel_read <= image_filter_Block_Mat_exit121721_proc1_U0_p_src_cols_V_2_reload_read;
    p_src_cols_V_2_loc_channel_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_2_out_out_write;
    p_src_cols_V_channel39_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_cols_V_channel39_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_din;
    p_src_cols_V_channel39_read <= image_filter_AXIvideo2Mat_U0_img_cols_V_read;
    p_src_cols_V_channel39_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out2_write;
    p_src_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_cols_V_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_din;
    p_src_cols_V_channel_read <= image_filter_Duplicate_1080_1920_32_32_U0_src_cols_V_read;
    p_src_cols_V_channel_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_cols_V_out_write;
    p_src_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_data_stream_0_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_din;
    p_src_data_stream_0_V_read <= image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_0_V_read;
    p_src_data_stream_0_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_0_V_write;
    p_src_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_data_stream_1_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_din;
    p_src_data_stream_1_V_read <= image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_1_V_read;
    p_src_data_stream_1_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_1_V_write;
    p_src_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_data_stream_2_V_din <= image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_din;
    p_src_data_stream_2_V_read <= image_filter_Duplicate_1080_1920_32_32_U0_src_data_stream_2_V_read;
    p_src_data_stream_2_V_write <= image_filter_AXIvideo2Mat_U0_img_data_stream_2_V_write;
    p_src_rows_V_2_loc_channel40_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_rows_V_2_loc_channel40_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_din;
    p_src_rows_V_2_loc_channel40_read <= image_filter_Block_Mat_exit121719_proc1_U0_p_src_rows_V_2_reload_read;
    p_src_rows_V_2_loc_channel40_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out3_write;
    p_src_rows_V_2_loc_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_rows_V_2_loc_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_din;
    p_src_rows_V_2_loc_channel_read <= image_filter_Block_Mat_exit121721_proc1_U0_p_src_rows_V_2_reload_read;
    p_src_rows_V_2_loc_channel_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_2_out_out_write;
    p_src_rows_V_channel38_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_rows_V_channel38_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_din;
    p_src_rows_V_channel38_read <= image_filter_AXIvideo2Mat_U0_img_rows_V_read;
    p_src_rows_V_channel38_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out1_write;
    p_src_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_src_rows_V_channel_din <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_din;
    p_src_rows_V_channel_read <= image_filter_Duplicate_1080_1920_32_32_U0_src_rows_V_read;
    p_src_rows_V_channel_write <= image_filter_Block_Mat_exit1217_proc_U0_p_src_rows_V_out_write;
    src0_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src0_cols_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_1;
    src0_cols_V_channel_read <= image_filter_CvtColor_U0_ap_ready;
    src0_cols_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_cols_V_channel;
    src0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    src0_data_stream_0_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_din;
    src0_data_stream_0_V_read <= image_filter_CvtColor_U0_p_src_data_stream_0_V_read;
    src0_data_stream_0_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_0_V_write;
    src0_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    src0_data_stream_1_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_din;
    src0_data_stream_1_V_read <= image_filter_CvtColor_U0_p_src_data_stream_1_V_read;
    src0_data_stream_1_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_1_V_write;
    src0_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    src0_data_stream_2_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_din;
    src0_data_stream_2_V_read <= image_filter_CvtColor_U0_p_src_data_stream_2_V_read;
    src0_data_stream_2_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst1_data_stream_2_V_write;
    src0_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src0_rows_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_0;
    src0_rows_V_channel_read <= image_filter_CvtColor_U0_ap_ready;
    src0_rows_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src0_rows_V_channel;
    src1_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src1_cols_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_3;
    src1_cols_V_channel_read <= image_filter_PaintMask_32_0_1080_1920_U0_ap_ready;
    src1_cols_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_cols_V_channel;
    src1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    src1_data_stream_0_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_din;
    src1_data_stream_0_V_read <= image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_0_V_read;
    src1_data_stream_0_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_0_V_write;
    src1_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    src1_data_stream_1_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_din;
    src1_data_stream_1_V_read <= image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_1_V_read;
    src1_data_stream_1_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_1_V_write;
    src1_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    src1_data_stream_2_V_din <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_din;
    src1_data_stream_2_V_read <= image_filter_PaintMask_32_0_1080_1920_U0_p_src_data_stream_2_V_read;
    src1_data_stream_2_V_write <= image_filter_Duplicate_1080_1920_32_32_U0_dst2_data_stream_2_V_write;
    src1_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src1_rows_V_channel_din <= image_filter_Block_Mat_exit121719_proc1_U0_ap_return_2;
    src1_rows_V_channel_read <= image_filter_PaintMask_32_0_1080_1920_U0_ap_ready;
    src1_rows_V_channel_write <= ap_chn_write_image_filter_Block_Mat_exit121719_proc1_U0_src1_rows_V_channel;
end behav;
