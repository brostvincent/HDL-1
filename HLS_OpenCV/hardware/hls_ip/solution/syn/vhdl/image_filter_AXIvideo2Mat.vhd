-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter_AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (10 downto 0);
    cols : IN STD_LOGIC_VECTOR (10 downto 0);
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of image_filter_AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal p_4_i_reg_162 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_reg_173 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_i_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_84 : BOOLEAN;
    signal tmp_data_V_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal AXI_video_strm_V_id_V0_status : STD_LOGIC;
    signal tmp_last_V_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_i_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal i_V_fu_291_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_356 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal brmerge_i_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_135 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_302_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal axi_last_V_3_i_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_i_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_181 : BOOLEAN;
    signal axi_data_V_3_i_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_data_V1_i_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_reg_151 : STD_LOGIC_VECTOR (10 downto 0);
    signal axi_last_V_2_i_phi_fu_212_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_phi_fu_224_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_i_reg_207pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_220pp1_it1 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_2_i_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_id_V0_update : STD_LOGIC;
    signal sof_1_i_fu_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_277_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_229 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond8_i_fu_286_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((exitcond_i_fu_297_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_i_reg_141 assign process. --
    axi_data_V1_i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_i_reg_141 <= tmp_data_V_reg_332;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_i_reg_141 <= axi_data_V_3_i_reg_245;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_i_reg_184 assign process. --
    axi_data_V_1_i_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                axi_data_V_1_i_reg_184 <= p_Val2_s_phi_fu_224_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_i_reg_184 <= axi_data_V1_i_reg_141;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_i_reg_245 assign process. --
    axi_data_V_3_i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((exitcond_i_reg_361 = ap_const_lv1_0)))) then 
                axi_data_V_3_i_reg_245 <= axi_data_V_1_i_reg_184;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_reg_257) and not(ap_sig_bdd_156))) then 
                axi_data_V_3_i_reg_245 <= AXI_video_strm_V_data_V_dout;
            end if; 
        end if;
    end process;

    -- axi_last_V1_i_reg_131 assign process. --
    axi_last_V1_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_i_reg_131 <= tmp_last_V_reg_340;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_i_reg_131 <= axi_last_V_3_i_reg_233;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_i_reg_233 assign process. --
    axi_last_V_3_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((exitcond_i_reg_361 = ap_const_lv1_0)))) then 
                axi_last_V_3_i_reg_233 <= eol_reg_173;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_reg_257) and not(ap_sig_bdd_156))) then 
                axi_last_V_3_i_reg_233 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- eol_2_i_reg_257 assign process. --
    eol_2_i_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((exitcond_i_reg_361 = ap_const_lv1_0)))) then 
                eol_2_i_reg_257 <= eol_i_reg_195;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_reg_257) and not(ap_sig_bdd_156))) then 
                eol_2_i_reg_257 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- eol_i_reg_195 assign process. --
    eol_i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_i_reg_195 <= axi_last_V_2_i_phi_fu_212_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                eol_i_reg_195 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- eol_reg_173 assign process. --
    eol_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_reg_173 <= axi_last_V_2_i_phi_fu_212_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                eol_reg_173 <= axi_last_V1_i_reg_131;
            end if; 
        end if;
    end process;

    -- p_4_i_reg_162 assign process. --
    p_4_i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (exitcond_i_fu_297_p2 = ap_const_lv1_0))) then 
                p_4_i_reg_162 <= j_V_fu_302_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then 
                p_4_i_reg_162 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_i_reg_151 assign process. --
    p_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_i_reg_151 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_i_reg_151 <= i_V_reg_356;
            end if; 
        end if;
    end process;

    -- sof_1_i_fu_90 assign process. --
    sof_1_i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                sof_1_i_fu_90 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_i_fu_90 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond_i_reg_361 <= exitcond_i_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_356 <= i_V_fu_291_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((AXI_video_strm_V_id_V0_status = ap_const_logic_0)))) then
                tmp_data_V_reg_332 <= AXI_video_strm_V_data_V_dout;
                tmp_last_V_reg_340 <= AXI_video_strm_V_last_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_84, AXI_video_strm_V_id_V0_status, exitcond8_i_fu_286_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0, ap_sig_bdd_135, ap_reg_ppiten_pp1_it1, ap_sig_bdd_156, eol_2_i_reg_257, tmp_user_V_fu_277_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_84)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((AXI_video_strm_V_id_V0_status = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_277_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((AXI_video_strm_V_id_V0_status = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_277_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond8_i_fu_286_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_2_i_reg_257) and not(ap_sig_bdd_156))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_156) and not((ap_const_lv1_0 = eol_2_i_reg_257)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_dest_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_id_V0_status <= (AXI_video_strm_V_data_V_empty_n and AXI_video_strm_V_keep_V_empty_n and AXI_video_strm_V_strb_V_empty_n and AXI_video_strm_V_user_V_empty_n and AXI_video_strm_V_last_V_empty_n and AXI_video_strm_V_id_V_empty_n and AXI_video_strm_V_dest_V_empty_n);

    -- AXI_video_strm_V_id_V0_update assign process. --
    AXI_video_strm_V_id_V0_update_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, AXI_video_strm_V_id_V0_status, exitcond_i_reg_361, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_i_fu_311_p2, ap_sig_bdd_135, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_156, eol_2_i_reg_257)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((AXI_video_strm_V_id_V0_status = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_2_i_reg_257) and not(ap_sig_bdd_156)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_fu_311_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_id_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_id_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_keep_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_last_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_strb_V_read <= AXI_video_strm_V_id_V0_update;
    AXI_video_strm_V_user_V_read <= AXI_video_strm_V_id_V0_update;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond8_i_fu_286_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond8_i_fu_286_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond8_i_fu_286_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond8_i_fu_286_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_i_reg_207pp1_it1 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_220pp1_it1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(img_data_stream_V_full_n, AXI_video_strm_V_id_V0_status, exitcond_i_reg_361, brmerge_i_fu_311_p2)
    begin
                ap_sig_bdd_135 <= (((AXI_video_strm_V_id_V0_status = ap_const_logic_0) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_i_fu_311_p2)) or ((exitcond_i_reg_361 = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(AXI_video_strm_V_id_V0_status, eol_2_i_reg_257)
    begin
                ap_sig_bdd_156 <= ((AXI_video_strm_V_id_V0_status = ap_const_logic_0) and (ap_const_lv1_0 = eol_2_i_reg_257));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_181 assign process. --
    ap_sig_bdd_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_181 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_229 assign process. --
    ap_sig_bdd_229_assign_proc : process(exitcond_i_reg_361, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_229 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_84 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_181)
    begin
        if (ap_sig_bdd_181) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_last_V_2_i_phi_fu_212_p4 assign process. --
    axi_last_V_2_i_phi_fu_212_p4_assign_proc : process(AXI_video_strm_V_last_V_dout, eol_reg_173, brmerge_i_fu_311_p2, ap_reg_phiprechg_axi_last_V_2_i_reg_207pp1_it1, ap_sig_bdd_229)
    begin
        if (ap_sig_bdd_229) then
            if (not((ap_const_lv1_0 = brmerge_i_fu_311_p2))) then 
                axi_last_V_2_i_phi_fu_212_p4 <= eol_reg_173;
            elsif ((ap_const_lv1_0 = brmerge_i_fu_311_p2)) then 
                axi_last_V_2_i_phi_fu_212_p4 <= AXI_video_strm_V_last_V_dout;
            else 
                axi_last_V_2_i_phi_fu_212_p4 <= ap_reg_phiprechg_axi_last_V_2_i_reg_207pp1_it1;
            end if;
        else 
            axi_last_V_2_i_phi_fu_212_p4 <= ap_reg_phiprechg_axi_last_V_2_i_reg_207pp1_it1;
        end if; 
    end process;

    brmerge_i_fu_311_p2 <= (sof_1_i_fu_90 or eol_i_reg_195);
    exitcond8_i_fu_286_p2 <= "1" when (p_i_reg_151 = rows) else "0";
    exitcond_i_fu_297_p2 <= "1" when (p_4_i_reg_162 = cols) else "0";
    i_V_fu_291_p2 <= std_logic_vector(unsigned(p_i_reg_151) + unsigned(ap_const_lv11_1));
    img_data_stream_V_din <= p_Val2_s_phi_fu_224_p4;

    -- img_data_stream_V_write assign process. --
    img_data_stream_V_write_assign_proc : process(exitcond_i_reg_361, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_135, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond_i_reg_361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_135 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_V_write <= ap_const_logic_1;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_302_p2 <= std_logic_vector(unsigned(p_4_i_reg_162) + unsigned(ap_const_lv11_1));

    -- p_Val2_s_phi_fu_224_p4 assign process. --
    p_Val2_s_phi_fu_224_p4_assign_proc : process(AXI_video_strm_V_data_V_dout, axi_data_V_1_i_reg_184, brmerge_i_fu_311_p2, ap_reg_phiprechg_p_Val2_s_reg_220pp1_it1, ap_sig_bdd_229)
    begin
        if (ap_sig_bdd_229) then
            if (not((ap_const_lv1_0 = brmerge_i_fu_311_p2))) then 
                p_Val2_s_phi_fu_224_p4 <= axi_data_V_1_i_reg_184;
            elsif ((ap_const_lv1_0 = brmerge_i_fu_311_p2)) then 
                p_Val2_s_phi_fu_224_p4 <= AXI_video_strm_V_data_V_dout;
            else 
                p_Val2_s_phi_fu_224_p4 <= ap_reg_phiprechg_p_Val2_s_reg_220pp1_it1;
            end if;
        else 
            p_Val2_s_phi_fu_224_p4 <= ap_reg_phiprechg_p_Val2_s_reg_220pp1_it1;
        end if; 
    end process;

    tmp_user_V_fu_277_p1 <= AXI_video_strm_V_user_V_dout;
end behav;
